<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/"><category term="Python" label="r/Python"/><updated>2022-05-03T00:53:00+00:00</updated><icon>https://www.redditstatic.com/icon.png/</icon><id>/r/python/.rss</id><link rel="self" href="https://old.reddit.com/r/python/.rss" type="application/atom+xml" /><link rel="alternate" href="https://old.reddit.com/r/python/" type="text/html" /><logo>https://b.thumbs.redditmedia.com/8HiO52_EuT_h63Qg.png</logo><subtitle>News about the programming language Python. If you have something to teach others post here. If you have questions or are a newbie use r/learnpython</subtitle><title>Python</title><entry><author><name>/u/Im__Joseph</name><uri>https://old.reddit.com/user/Im__Joseph</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Tell &lt;a href=&quot;/r/python&quot;&gt;/r/python&lt;/a&gt; what you&amp;#39;re working on this week! You can be bragging, grousing, sharing your passion, or explaining your pain. Talk about your current project or your pet project; whatever you want to share.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/Im__Joseph&quot;&gt; /u/Im__Joseph &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ufnesj/sunday_daily_thread_whats_everyone_working_on/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ufnesj/sunday_daily_thread_whats_everyone_working_on/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ufnesj</id><link href="https://old.reddit.com/r/Python/comments/ufnesj/sunday_daily_thread_whats_everyone_working_on/" /><updated>2022-05-01T00:00:12+00:00</updated><published>2022-05-01T00:00:12+00:00</published><title>Sunday Daily Thread: What's everyone working on this week?</title></entry><entry><author><name>/u/Im__Joseph</name><uri>https://old.reddit.com/user/Im__Joseph</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Have some burning questions on advanced Python topics? Use this thread to ask more advanced questions related to Python.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;If your question is a beginner question we hold a beginner Daily Thread tomorrow (Wednesday) where you can ask any question! We may remove questions here and ask you to resubmit tomorrow.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This thread may be fairly low volume in replies, if you don&amp;#39;t receive a response we recommend looking at &lt;a href=&quot;/r/LearnPython&quot;&gt;r/LearnPython&lt;/a&gt; or joining the Python Discord server at &lt;a href=&quot;https://discord.gg/python&quot;&gt;https://discord.gg/python&lt;/a&gt; where you stand a better chance of receiving a response.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/Im__Joseph&quot;&gt; /u/Im__Joseph &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh3b0g/tuesday_daily_thread_advanced_questions/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh3b0g/tuesday_daily_thread_advanced_questions/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_uh3b0g</id><link href="https://old.reddit.com/r/Python/comments/uh3b0g/tuesday_daily_thread_advanced_questions/" /><updated>2022-05-03T00:00:09+00:00</updated><published>2022-05-03T00:00:09+00:00</published><title>Tuesday Daily Thread: Advanced questions</title></entry><entry><author><name>/u/kolibril13</name><uri>https://old.reddit.com/user/kolibril13</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugrn15/i_just_wrote_a_beforeafter_image_slider_widget/&quot;&gt; &lt;img src=&quot;https://a.thumbs.redditmedia.com/SShBd2OPcaZnoGzhHkgh31j6jv9KsQjO4RJIYpHX1u8.jpg&quot; alt=&quot;I just wrote a before/after image slider widget for JupyterLab, and here it is!&quot; title=&quot;I just wrote a before/after image slider widget for JupyterLab, and here it is!&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kolibril13/jupyter-splitview&quot;&gt;https://github.com/kolibril13/jupyter-splitview&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This project contains a cell magic that displays images in splitview mode, this is how it looks like:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/ggu73pqxu2x81.jpg?width=1636&amp;amp;format=pjpg&amp;amp;auto=webp&amp;amp;s=962922a3fb39b0cc62bd21b17eeaab410af2ae5d&quot;&gt;https://preview.redd.it/ggu73pqxu2x81.jpg?width=1636&amp;amp;format=pjpg&amp;amp;auto=webp&amp;amp;s=962922a3fb39b0cc62bd21b17eeaab410af2ae5d&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/kolibril13&quot;&gt; /u/kolibril13 &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugrn15/i_just_wrote_a_beforeafter_image_slider_widget/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugrn15/i_just_wrote_a_beforeafter_image_slider_widget/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugrn15</id><media:thumbnail url="https://a.thumbs.redditmedia.com/SShBd2OPcaZnoGzhHkgh31j6jv9KsQjO4RJIYpHX1u8.jpg" /><link href="https://old.reddit.com/r/Python/comments/ugrn15/i_just_wrote_a_beforeafter_image_slider_widget/" /><updated>2022-05-02T15:03:27+00:00</updated><published>2022-05-02T15:03:27+00:00</published><title>I just wrote a before/after image slider widget for JupyterLab, and here it is!</title></entry><entry><author><name>/u/crypt0lution</name><uri>https://old.reddit.com/user/crypt0lution</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh0vol/real_time_color_ascii_rendering_in_python_using/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/oaWXZMCMi0Z7QTmI9Kl0623-1Xg4uAxh2X3HPRCK_f0.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=5fa5eb0a14a270c7ed9a1aa447cda30011af1d85&quot; alt=&quot;Real Time Color ASCII Rendering in Python using NumPy Vectorization&quot; title=&quot;Real Time Color ASCII Rendering in Python using NumPy Vectorization&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Most other ASCII Image converters use the &lt;code&gt;pillow&lt;/code&gt; module and loop over every pixel in the original image and paste in the corresponding ASCII character into the ASCII image as they go. This is very slow, so I set out to vectorize this process using &lt;code&gt;numpy&lt;/code&gt;. You can check out the vectorization in the source, but it&amp;#39;s basically just calling &lt;code&gt;reshape&lt;/code&gt; and &lt;code&gt;transpose&lt;/code&gt; on a list of font bitmaps until the ascii image is created.&lt;/p&gt; &lt;p&gt;Full HD (1920x1080) video gets ~23 FPS conversion rate.&lt;/p&gt; &lt;p&gt;Source: &lt;a href=&quot;https://github.com/AlexEidt/ASCII-Video&quot;&gt;https://github.com/AlexEidt/ASCII-Video&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Video explaining the algorithm: &lt;a href=&quot;https://youtu.be/SzqKClkCi_0&quot;&gt;https://youtu.be/SzqKClkCi_0&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://reddit.com/link/uh0vol/video/n9sqzzi8x4x81/player&quot;&gt;https://reddit.com/link/uh0vol/video/n9sqzzi8x4x81/player&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/crypt0lution&quot;&gt; /u/crypt0lution &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh0vol/real_time_color_ascii_rendering_in_python_using/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh0vol/real_time_color_ascii_rendering_in_python_using/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_uh0vol</id><media:thumbnail url="https://external-preview.redd.it/oaWXZMCMi0Z7QTmI9Kl0623-1Xg4uAxh2X3HPRCK_f0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=5fa5eb0a14a270c7ed9a1aa447cda30011af1d85" /><link href="https://old.reddit.com/r/Python/comments/uh0vol/real_time_color_ascii_rendering_in_python_using/" /><updated>2022-05-02T21:59:51+00:00</updated><published>2022-05-02T21:59:51+00:00</published><title>Real Time Color ASCII Rendering in Python using NumPy Vectorization</title></entry><entry><author><name>/u/danosull</name><uri>https://old.reddit.com/user/danosull</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugz3r0/pythondocsxyz_live_search_for_python_documentation/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/efZrgL6DRdUeFoAv23pco6mYiFb4qCukzES8H2pDGcA.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=c12110ff6f857120bd01bb3ccf56d4baca995ac6&quot; alt=&quot;pythondocs.xyz - live search for Python documentation&quot; title=&quot;pythondocs.xyz - live search for Python documentation&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://reddit.com/link/ugz3r0/video/m909417ui4x81/player&quot;&gt;pythondocs.xyz&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Hi everyone!&lt;/p&gt; &lt;p&gt;I&amp;#39;ve been working on a web search interface for Python&amp;#39;s documentation as a personal project, and I think it&amp;#39;s ready for other people to use...&lt;/p&gt; &lt;p&gt;Please give it a go (and join me in praying to the server gods):&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://pythondocs.xyz/&quot;&gt;https://pythondocs.xyz/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here’s the tech stack for anyone interested:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Parser: Beautiful Soup + Mozilla Bleach &lt;/li&gt; &lt;li&gt;Database: in-memory SQLite (aiosqlite) + SQLAlchemy &lt;/li&gt; &lt;li&gt;Web server: FastAPI + Uvicorn + Jinja2 &lt;/li&gt; &lt;li&gt;Front end: Tailwind CSS + htmx + Alpine.js&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I have ideas for future improvements but hopefully the current version is useful to someone.&lt;/p&gt; &lt;p&gt;Let me know what you think!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/danosull&quot;&gt; /u/danosull &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugz3r0/pythondocsxyz_live_search_for_python_documentation/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugz3r0/pythondocsxyz_live_search_for_python_documentation/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugz3r0</id><media:thumbnail url="https://external-preview.redd.it/efZrgL6DRdUeFoAv23pco6mYiFb4qCukzES8H2pDGcA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=c12110ff6f857120bd01bb3ccf56d4baca995ac6" /><link href="https://old.reddit.com/r/Python/comments/ugz3r0/pythondocsxyz_live_search_for_python_documentation/" /><updated>2022-05-02T20:38:51+00:00</updated><published>2022-05-02T20:38:51+00:00</published><title>pythondocs.xyz - live search for Python documentation</title></entry><entry><author><name>/u/pmz</name><uri>https://old.reddit.com/user/pmz</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugl19x/anaconda_new_from_anaconda_python_in_the_browser/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/aXXT21SwJuhm4r-G1OyRDorQFSDzOcuqw0OkrqlG8AM.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=5b3ad15adb4bf849680ef477ce9ae6cdc95a9bdf&quot; alt=&quot;Anaconda | New from Anaconda: Python in the Browser&quot; title=&quot;Anaconda | New from Anaconda: Python in the Browser&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/pmz&quot;&gt; /u/pmz &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.anaconda.com/blog/pyscript-python-in-the-browser&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugl19x/anaconda_new_from_anaconda_python_in_the_browser/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugl19x</id><media:thumbnail url="https://external-preview.redd.it/aXXT21SwJuhm4r-G1OyRDorQFSDzOcuqw0OkrqlG8AM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=5b3ad15adb4bf849680ef477ce9ae6cdc95a9bdf" /><link href="https://old.reddit.com/r/Python/comments/ugl19x/anaconda_new_from_anaconda_python_in_the_browser/" /><updated>2022-05-02T08:35:05+00:00</updated><published>2022-05-02T08:35:05+00:00</published><title>Anaconda | New from Anaconda: Python in the Browser</title></entry><entry><author><name>/u/julianterrypablu</name><uri>https://old.reddit.com/user/julianterrypablu</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugkmv7/introducing_the_boto_s3_router_package_on_pypi/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/MgH6ARMH72EYe8x_quDZyWnuYYanYBdmaXMFpeI-5eQ.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=6772f5e6a5aa9517b3bc8b95fe3fa04a862e2917&quot; alt=&quot;Introducing the Boto S3 Router Package on PyPI&quot; title=&quot;Introducing the Boto S3 Router Package on PyPI&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/julianterrypablu&quot;&gt; /u/julianterrypablu &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://lakefs.io/introducing-the-boto-s3-router-package-on-pypi/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugkmv7/introducing_the_boto_s3_router_package_on_pypi/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugkmv7</id><media:thumbnail url="https://external-preview.redd.it/MgH6ARMH72EYe8x_quDZyWnuYYanYBdmaXMFpeI-5eQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6772f5e6a5aa9517b3bc8b95fe3fa04a862e2917" /><link href="https://old.reddit.com/r/Python/comments/ugkmv7/introducing_the_boto_s3_router_package_on_pypi/" /><updated>2022-05-02T08:04:10+00:00</updated><published>2022-05-02T08:04:10+00:00</published><title>Introducing the Boto S3 Router Package on PyPI</title></entry><entry><author><name>/u/All_i_want_is_karma_</name><uri>https://old.reddit.com/user/All_i_want_is_karma_</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I&amp;#39;m currently trying to figure out an elegant way of scheduling millions of simulation runs across a few machines (or just my own for development, very important). There&amp;#39;s an abundance of frameworks with not much difference between them. As well as this, there&amp;#39;s about 4 popular libraries (below) that seem to be serving the exact same purpose. &lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/celery/celery&quot;&gt;Celery&lt;/a&gt; -&amp;gt; What I&amp;#39;m currently considering using&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Celery Clones?&lt;/h4&gt; &lt;p&gt;&lt;sup&gt;please&lt;/sup&gt; &lt;sup&gt;correct&lt;/sup&gt; &lt;sup&gt;me&lt;/sup&gt; &lt;sup&gt;if&lt;/sup&gt; &lt;sup&gt;I&amp;#39;m&lt;/sup&gt; &lt;sup&gt;wrong&lt;/sup&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://dramatiq.io/&quot;&gt;Dramatiq&lt;/a&gt; -&amp;gt; Just another celery? &lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/coleifer/huey&quot;&gt;Huey&lt;/a&gt; -&amp;gt; Same again?&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/rq/rq&quot;&gt;RQ&lt;/a&gt; -&amp;gt; ...? &lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Other&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/stable/index.html&quot;&gt;Apache Airflow&lt;/a&gt; -&amp;gt; Seems more like a workflow manager&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://nifi.apache.org/&quot;&gt;Apache NiFi&lt;/a&gt; -&amp;gt; More for data analysis/transformation&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/All_i_want_is_karma_&quot;&gt; /u/All_i_want_is_karma_ &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugkja3/what_is_your_favourite_task_queuing_framework/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugkja3/what_is_your_favourite_task_queuing_framework/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugkja3</id><link href="https://old.reddit.com/r/Python/comments/ugkja3/what_is_your_favourite_task_queuing_framework/" /><updated>2022-05-02T07:57:24+00:00</updated><published>2022-05-02T07:57:24+00:00</published><title>What is your favourite task queuing framework?</title></entry><entry><author><name>/u/math-bw</name><uri>https://old.reddit.com/user/math-bw</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;&lt;em&gt;Disclaimer: I work with Bytewax, the company working on the streaming library, but I still thought this was something interesting and I was wondering what the community thought.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;I used Bytewax, which is a python stream processing library, to maintain an order book off of coinbase level2 data. I wanted to share it here to see if you all thought it was interesting, useful or to shame my Python skills. I would be really interested if there were any hft or algo pros who could point me in the direction of an interesting algorithm I could showcase to make this a bit cooler. And if it would be interesting to turn this into a tutorial. &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/awmatheson/dataflow-coinbase-order-flow&quot;&gt;https://github.com/awmatheson/dataflow-coinbase-order-flow&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/math-bw&quot;&gt; /u/math-bw &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh3dal/coinbase_order_book_analysis_with_python/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh3dal/coinbase_order_book_analysis_with_python/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_uh3dal</id><link href="https://old.reddit.com/r/Python/comments/uh3dal/coinbase_order_book_analysis_with_python/" /><updated>2022-05-03T00:03:15+00:00</updated><published>2022-05-03T00:03:15+00:00</published><title>Coinbase order book analysis with python streaming library Bytewax</title></entry><entry><author><name>/u/pantsbuild</name><uri>https://old.reddit.com/user/pantsbuild</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugyk1j/pants_211_adds_pex_lockfiles_for_python/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/uzRki5pmHEYshMSIlq9yaZbNdmF0Nux5oGX3qVOVVjM.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=ab63b599a2a8dd66e1e03ec18e4276c3b6726f48&quot; alt=&quot;Pants 2.11 adds Pex lockfiles for Python, parametrization of targets, and Go Protobuf codegen&quot; title=&quot;Pants 2.11 adds Pex lockfiles for Python, parametrization of targets, and Go Protobuf codegen&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/pantsbuild&quot;&gt; /u/pantsbuild &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://blog.pantsbuild.org/introducing-pants-2-11/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugyk1j/pants_211_adds_pex_lockfiles_for_python/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugyk1j</id><media:thumbnail url="https://external-preview.redd.it/uzRki5pmHEYshMSIlq9yaZbNdmF0Nux5oGX3qVOVVjM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ab63b599a2a8dd66e1e03ec18e4276c3b6726f48" /><link href="https://old.reddit.com/r/Python/comments/ugyk1j/pants_211_adds_pex_lockfiles_for_python/" /><updated>2022-05-02T20:13:52+00:00</updated><published>2022-05-02T20:13:52+00:00</published><title>Pants 2.11 adds Pex lockfiles for Python, parametrization of targets, and Go Protobuf codegen</title></entry><entry><author><name>/u/ElectronicToday2539</name><uri>https://old.reddit.com/user/ElectronicToday2539</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugz2ee/pyqt5_widgets/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/MjfrVxULGOeWU4QPjK6WqPsTheuZxSQkMwjbeE6GSLI.jpg?width=320&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=632c6ea8a3e35b3946ba8682838ede27032306aa&quot; alt=&quot;PyQt5 widgets&quot; title=&quot;PyQt5 widgets&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/ElectronicToday2539&quot;&gt; /u/ElectronicToday2539 &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://oneminutepython.com/pyqt5-widgets&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugz2ee/pyqt5_widgets/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugz2ee</id><media:thumbnail url="https://external-preview.redd.it/MjfrVxULGOeWU4QPjK6WqPsTheuZxSQkMwjbeE6GSLI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=632c6ea8a3e35b3946ba8682838ede27032306aa" /><link href="https://old.reddit.com/r/Python/comments/ugz2ee/pyqt5_widgets/" /><updated>2022-05-02T20:37:03+00:00</updated><published>2022-05-02T20:37:03+00:00</published><title>PyQt5 widgets</title></entry><entry><author><name>/u/homosapienhomodeus</name><uri>https://old.reddit.com/user/homosapienhomodeus</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;This is 100% a self plug, but something i’d like to share as a milestone for myself. I setup my own hosted blog site using Hugo and Cloudflare (to write a blog post on it too..) and posted my first blog.&lt;/p&gt; &lt;p&gt;If you’re new to python or your installations are a mess and you’re wondering how to have a clean project setup, check it out!&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://eliasbenaddou.com/setting-up-python-projects-with-pyenv-poetry/&quot;&gt;https://eliasbenaddou.com/setting-up-python-projects-with-pyenv-poetry/&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/homosapienhomodeus&quot;&gt; /u/homosapienhomodeus &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh0vuh/clean_python_setup_pyenv_and_poetry_for_every_new/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh0vuh/clean_python_setup_pyenv_and_poetry_for_every_new/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_uh0vuh</id><link href="https://old.reddit.com/r/Python/comments/uh0vuh/clean_python_setup_pyenv_and_poetry_for_every_new/" /><updated>2022-05-02T22:00:03+00:00</updated><published>2022-05-02T22:00:03+00:00</published><title>Clean Python Setup - Pyenv and Poetry for every new project (blog)</title></entry><entry><author><name>/u/chelicerae-aureus</name><uri>https://old.reddit.com/user/chelicerae-aureus</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;So I was learning about &lt;code&gt;zope.interface,&lt;/code&gt; &lt;code&gt;ABC&lt;/code&gt;s and &lt;code&gt;Protocol&lt;/code&gt;s and had a strong feeling that all this things are foreign language idioms that doesn&amp;#39;t feel pythonic at all. I might be wrong, hence I decided to hear the thoughts of python community. &lt;/p&gt; &lt;p&gt;So, we have inheritance in python. What does inheriting class in pure python force us to? Well nothing really: we basically enreach our child class with parents methods &amp;quot;for free&amp;quot; or can redefine them which is synonymous to creating new function obj and assigning it parents function name. I see how it helps us to evade breaking DRY principle, but doing the same in a functional way seems easier and more legible. At least, some patterns are easily implemented in functional way, like decorators and strategies. &lt;/p&gt; &lt;p&gt;Moving on to ABCs. Main advantage to me here seems to be an &lt;code&gt;@abstractmethod&lt;/code&gt; decorator. It forces you to implement methods wrapped in it child classes, otherwise you get a very straightforward exception. That is very nice, but is it worthy of importing additional library? Is it pythonic way of coding? &lt;/p&gt; &lt;p&gt;&lt;code&gt;typing&lt;/code&gt; library and type hints or type annotations seem to me more of a documentation tool that we can use to reduce the ambiguity of people reading our code. Then there are &lt;code&gt;Protocol&lt;/code&gt;s. Without third party static type analysis tools they don&amp;#39;t force anything on us, except the fact that we can&amp;#39;t instantiate &lt;code&gt;Protocol&lt;/code&gt;s direct child, which is nice, but easily simulated by redefining __init__ by making it throw exception. As I understood for them to make sense we need third party static type analysis tools like &lt;code&gt;mypy&lt;/code&gt;. And the thing is that &lt;a href=&quot;https://peps.python.org/pep-0544/#non-goals&quot;&gt;PEP 544&lt;/a&gt; directly states that there will be &lt;strong&gt;only third party&lt;/strong&gt; static type analysis tools: &lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;No runtime semantics will be imposed for variables or parameters annotated with a protocol class. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Any checks will be performed only by third-party type checkers and other tools.&lt;/strong&gt; &lt;/p&gt; &lt;p&gt;Programmers are free to not use them even if they use type annotations. &lt;/p&gt; &lt;p&gt;There is no intent to make protocols non-optional in the future. &lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;The only logical way to use statically typed python is to create something like typescript on the top of python, otherwise you end up writing overly verbose and seeming largely non-pythonic code. &lt;/p&gt; &lt;p&gt;So to sum up, my questions to you are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;What is pythonic code? More OOP or functional approach? OOP in python doesn&amp;#39;t really seem OOP-ish, to be honest. &lt;/li&gt; &lt;li&gt;What place does static typing has in python? Doesn&amp;#39;t static typing break one of core pythons design ideas? &lt;/li&gt; &lt;li&gt;What should we control and enforce in our code? Should we use things like &lt;code&gt;ABC&lt;/code&gt;s or &lt;code&gt;isinstance()&lt;/code&gt; to guarantee consistency or should we treat code clients like &amp;quot;adult&amp;quot; beings that take the &amp;quot;responsibility&amp;quot; themselves? &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;I hope I didn&amp;#39;t break rules of this sub, this looked to me more fitting here then &lt;a href=&quot;/r/learnpython&quot;&gt;r/learnpython&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/chelicerae-aureus&quot;&gt; /u/chelicerae-aureus &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugn2r7/inheritance_interfaces_protocols_and_static_type/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugn2r7/inheritance_interfaces_protocols_and_static_type/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugn2r7</id><link href="https://old.reddit.com/r/Python/comments/ugn2r7/inheritance_interfaces_protocols_and_static_type/" /><updated>2022-05-02T11:01:11+00:00</updated><published>2022-05-02T11:01:11+00:00</published><title>Inheritance, Interfaces, Protocols and static type analysis in Python confusion</title></entry><entry><author><name>/u/mdsanima</name><uri>https://old.reddit.com/user/mdsanima</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh41lx/python_packages_mdsanimadev_for_add_emoi_and/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/2f7_lJkwl4x-OUsqJzRNljKqA3bIplcajlKUiSWzFpM.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=d227a16cb7e6706173acf9e1598fedb921721d69&quot; alt=&quot;Python packages *mdsanima-dev* for add emoi and colors in terminal output&quot; title=&quot;Python packages *mdsanima-dev* for add emoi and colors in terminal output&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/mdsanima&quot;&gt; /u/mdsanima &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://mdsanima-dev.github.io/mdsanima-dev/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh41lx/python_packages_mdsanimadev_for_add_emoi_and/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_uh41lx</id><media:thumbnail url="https://external-preview.redd.it/2f7_lJkwl4x-OUsqJzRNljKqA3bIplcajlKUiSWzFpM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=d227a16cb7e6706173acf9e1598fedb921721d69" /><link href="https://old.reddit.com/r/Python/comments/uh41lx/python_packages_mdsanimadev_for_add_emoi_and/" /><updated>2022-05-03T00:39:43+00:00</updated><published>2022-05-03T00:39:43+00:00</published><title>Python packages *mdsanima-dev* for add emoi and colors in terminal output</title></entry><entry><author><name>/u/asking_for_a_friend0</name><uri>https://old.reddit.com/user/asking_for_a_friend0</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Is there an alternative to packageupdates.org ? how do you know your dependencies have new versions?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/asking_for_a_friend0&quot;&gt; /u/asking_for_a_friend0 &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugi1mx/is_official_python_wiki_dead_some_links_seem_dead/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugi1mx/is_official_python_wiki_dead_some_links_seem_dead/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugi1mx</id><link href="https://old.reddit.com/r/Python/comments/ugi1mx/is_official_python_wiki_dead_some_links_seem_dead/" /><updated>2022-05-02T05:02:05+00:00</updated><published>2022-05-02T05:02:05+00:00</published><title>Is official python wiki dead? Some links seem dead and wiki doesn't seem to updated for a long time.</title></entry><entry><author><name>/u/ahmedbesbes</name><uri>https://old.reddit.com/user/ahmedbesbes</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugrg69/github_actions_everything_you_need_to_know_to_get/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/PF0J63k9BpBP3SzQ8T1YYkkxN1fiGpYud3UkMOxIE2Y.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=a306d43907d06da714ef69f63ca0021e4e3f9efa&quot; alt=&quot;Github Actions— Everything You Need to Know to Get Started&quot; title=&quot;Github Actions— Everything You Need to Know to Get Started&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/ahmedbesbes&quot;&gt; /u/ahmedbesbes &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://towardsdatascience.com/github-actions-everything-you-need-to-know-to-get-started-537f1dffa0ed&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugrg69/github_actions_everything_you_need_to_know_to_get/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugrg69</id><media:thumbnail url="https://external-preview.redd.it/PF0J63k9BpBP3SzQ8T1YYkkxN1fiGpYud3UkMOxIE2Y.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a306d43907d06da714ef69f63ca0021e4e3f9efa" /><link href="https://old.reddit.com/r/Python/comments/ugrg69/github_actions_everything_you_need_to_know_to_get/" /><updated>2022-05-02T14:54:51+00:00</updated><published>2022-05-02T14:54:51+00:00</published><title>Github Actions— Everything You Need to Know to Get Started</title></entry><entry><author><name>/u/xxmalik</name><uri>https://old.reddit.com/user/xxmalik</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;This is an idea I had recently. Basically, it&amp;#39;s a Python interpreter running on bare metal with the entirety of the OS on top - everything from the shell, to the desktop environment, to high level software. There are obvious drawbacks to this, it would be considerably slower than a binary-based OS, and not to mention, almost nothing would be portable from other established OSes. But a 100% interpreted OS offers something nothing else can - infinite modularity. You&amp;#39;d be able to take any feature out of any program and use it in your workflow. You&amp;#39;d be able to join two programs together with features you like from each of them. It&amp;#39;s not about programs anymore - it&amp;#39;s about tasks.&lt;/p&gt; &lt;p&gt;Of course, I see many problems with this already - drivers, lack of developers, complexity of rebuilding everything for Python. But is there anything that completely makes this idea impossible to realize?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/xxmalik&quot;&gt; /u/xxmalik &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh19r7/would_a_python_os_be_technically_possible/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uh19r7/would_a_python_os_be_technically_possible/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_uh19r7</id><link href="https://old.reddit.com/r/Python/comments/uh19r7/would_a_python_os_be_technically_possible/" /><updated>2022-05-02T22:18:04+00:00</updated><published>2022-05-02T22:18:04+00:00</published><title>Would a Python OS be technically possible?</title></entry><entry><author><name>/u/Benjameenn</name><uri>https://old.reddit.com/user/Benjameenn</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Hey, i made this script to add friends on steam automatically. Been doing python for about a year now. Not too actively though. I made this script for myself but thought maybe someone else would also get some use out of it :)&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/pebnn/SteamAutoFriend&quot;&gt;https://github.com/pebnn/SteamAutoFriend&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/Benjameenn&quot;&gt; /u/Benjameenn &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugw099/steamautofriend_automatically_add_friends/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugw099/steamautofriend_automatically_add_friends/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugw099</id><link href="https://old.reddit.com/r/Python/comments/ugw099/steamautofriend_automatically_add_friends/" /><updated>2022-05-02T18:18:33+00:00</updated><published>2022-05-02T18:18:33+00:00</published><title>SteamAutoFriend - Automatically add friends systematically</title></entry><entry><author><name>/u/kuddoo</name><uri>https://old.reddit.com/user/kuddoo</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;So my situation is this: I&amp;#39;ve been working for a few years as a L2 Network Engineer but would like to try something new. I had a bad teacher in elementary (he was doing something else instead of teaching) so I had a bad start at math and so I was very close to flunk every year after that because I was always way behind&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;I&amp;#39;ve just started learning Python because I realised I want to do something else (that does not involve Networking) and I really like the idea of creating stuff. &lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;Realistically speaking, do you think I have a chance to pursue a coding career or should I just stick with Networking ? I&amp;#39;m asking you because: &lt;/p&gt; &lt;ol&gt; &lt;li&gt;My time is limited as it is and I can&amp;#39;t really start learning math from scratch and also Python. I know that math requires lots of studying and practice&lt;/li&gt; &lt;li&gt;I realise that my chances of becoming more than a coder are slim (say a Software Engineer) without math and I accept that;&lt;/li&gt; &lt;li&gt;A lot of companies on LinkedIn ask of you to know many programming languages (not only python). From what I heard from other people, you can understand and it&amp;#39;s easy to learn other coding languages if you already know one to perfection but i&amp;#39;m not going to be that person for a while&lt;/li&gt; &lt;li&gt;I&amp;#39;ve heard that most technical interviews include some sorth of math logic test and also coding test. Is this true or not ? I&amp;#39;m afraid of math logic tests.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;Sorry if my English is a little raw,, it is not my 1st language. Also sorry if I shouldn&amp;#39;t post here; I figured you guys would know the ins and outs of starting in Python, getting a job etc.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/kuddoo&quot;&gt; /u/kuddoo &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugob9h/trying_to_learn_python_and_i_need_your_input_to/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugob9h/trying_to_learn_python_and_i_need_your_input_to/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugob9h</id><link href="https://old.reddit.com/r/Python/comments/ugob9h/trying_to_learn_python_and_i_need_your_input_to/" /><updated>2022-05-02T12:16:01+00:00</updated><published>2022-05-02T12:16:01+00:00</published><title>Trying to learn Python and I need your input to know if it is worth it in my situation</title></entry><entry><author><name>/u/juanluisback</name><uri>https://old.reddit.com/user/juanluisback</uri></author><category term="Python" label="r/Python"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/juanluisback&quot;&gt; /u/juanluisback &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.orchest.io/blog/the-great-python-dataframe-showdown-part-2-out-of-core-processing-with-vaex?utm_source=reddit&amp;amp;utm_medium=referrer&amp;amp;utm_campaign=dataframe_showdown&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugsokr/outofcore_processing_with_vaex_how_does_it/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugsokr</id><link href="https://old.reddit.com/r/Python/comments/ugsokr/outofcore_processing_with_vaex_how_does_it/" /><updated>2022-05-02T15:51:00+00:00</updated><published>2022-05-02T15:51:00+00:00</published><title>Out-of-core processing with Vaex: how does it compare with pandas?</title></entry><entry><author><name>/u/Masynchin</name><uri>https://old.reddit.com/user/Masynchin</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Hello!&lt;/p&gt; &lt;p&gt;Last time I posted about &lt;a href=&quot;https://github.com/Masynchin/ndnt&quot;&gt;ndnt&lt;/a&gt; first release. Ndnt is the CLI tool that helps you inspect indentation stats of your code.&lt;/p&gt; &lt;p&gt;I show only project itself, but not any way to contribute. So, I added contributing guide that includes CONTRIBUTING-file, Issue and Pull Requests templates (like in serious projects :).&lt;/p&gt; &lt;p&gt;I hope you will be interested in helping my project and this contributing guide will simplify a way to do it.&lt;/p&gt; &lt;p&gt;GitHub repo: &lt;a href=&quot;https://github.com/Masynchin/ndnt&quot;&gt;https://github.com/Masynchin/ndnt&lt;/a&gt; PyPI link: &lt;a href=&quot;https://pypi.org/project/ndnt&quot;&gt;https://pypi.org/project/ndnt&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/Masynchin&quot;&gt; /u/Masynchin &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugoz4e/contribute_to_my_project_ndnt/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugoz4e/contribute_to_my_project_ndnt/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugoz4e</id><link href="https://old.reddit.com/r/Python/comments/ugoz4e/contribute_to_my_project_ndnt/" /><updated>2022-05-02T12:53:23+00:00</updated><published>2022-05-02T12:53:23+00:00</published><title>Contribute to my project Ndnt</title></entry><entry><author><name>/u/lutipri</name><uri>https://old.reddit.com/user/lutipri</uri></author><category term="Python" label="r/Python"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/lutipri&quot;&gt; /u/lutipri &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://w3techs.com/technologies/history_details/pl-python/3/y&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugje7m/historical_yearly_trends_in_the_usage_statistics/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugje7m</id><link href="https://old.reddit.com/r/Python/comments/ugje7m/historical_yearly_trends_in_the_usage_statistics/" /><updated>2022-05-02T06:34:18+00:00</updated><published>2022-05-02T06:34:18+00:00</published><title>Historical yearly trends in the usage statistics of Python version 3, May 2022</title></entry><entry><author><name>/u/CopilotExperiments</name><uri>https://old.reddit.com/user/CopilotExperiments</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/uglpzi/discord_python_how_to_create_a_discord_bot/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/qlydorpqLqzI832p1A9tf2VuoFlbH1bsiWKWhOp6dpw.jpg?width=320&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=18e5e312dff439d2383c8dba7e05eab766a155c2&quot; alt=&quot;Discord Python - How to Create a Discord Bot&quot; title=&quot;Discord Python - How to Create a Discord Bot&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/CopilotExperiments&quot;&gt; /u/CopilotExperiments &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://youtu.be/UA_zrhI8R3w&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/uglpzi/discord_python_how_to_create_a_discord_bot/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_uglpzi</id><media:thumbnail url="https://external-preview.redd.it/qlydorpqLqzI832p1A9tf2VuoFlbH1bsiWKWhOp6dpw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=18e5e312dff439d2383c8dba7e05eab766a155c2" /><link href="https://old.reddit.com/r/Python/comments/uglpzi/discord_python_how_to_create_a_discord_bot/" /><updated>2022-05-02T09:25:38+00:00</updated><published>2022-05-02T09:25:38+00:00</published><title>Discord Python - How to Create a Discord Bot</title></entry><entry><author><name>/u/ZachVorhies</name><uri>https://old.reddit.com/user/ZachVorhies</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I made this library because I wanted a battle tested selenium webdriver instance on all platforms that can ALSO be compiled with nuitka into a binary app that&amp;#39;s signed and simply runs. It&amp;#39;s a zero configuration setup with reasonable defaults.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/zackees/open-webdriver&quot;&gt;https://github.com/zackees/open-webdriver&lt;/a&gt;&lt;/p&gt; &lt;h1&gt;From the readme&lt;/h1&gt; &lt;p&gt;The simplest and most production-ready selenium webdriver wrapper API in python.&lt;/p&gt; &lt;p&gt;All the other api-wrappers are under-tested and break as soon as they are thrown into a headless production server. This project aims to make something that&amp;#39;s easy to develop and safe.&lt;/p&gt; &lt;p&gt;Benefits:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Production ready. Cross platform tests.&lt;/li&gt; &lt;li&gt;ssl certs are turned off to reduce errors for many websites.&lt;/li&gt; &lt;li&gt;Downloading the proper binary for your platform and stashing it next to the app.&lt;/li&gt; &lt;li&gt;Headless by default.&lt;/li&gt; &lt;li&gt;Intelligently forces headless in a linux environment without a display card (prevents crash).&lt;/li&gt; &lt;li&gt;Platform tests to ensure a stable cross platform experience.&lt;/li&gt; &lt;li&gt;Pins to a specific version of selenium driver stack to ensure reproducable behavior.&lt;/li&gt; &lt;li&gt;Nuitka Binary Builds for all platforms are tested.&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;Install&lt;/h1&gt; &lt;p&gt;&lt;code&gt;python -m pip install open-webdriver&lt;/code&gt;&lt;/p&gt; &lt;h1&gt;Api&lt;/h1&gt; &lt;pre&gt;&lt;code&gt;from open_webdriver import open_webdriver with open_webdriver() as driver: driver.get(&amp;quot;https://www.google.com&amp;quot;) assert driver.title == &amp;quot;Google&amp;quot; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/ZachVorhies&quot;&gt; /u/ZachVorhies &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugws98/easist_and_most_stable_way_to_run_selenium_driver/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugws98/easist_and_most_stable_way_to_run_selenium_driver/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugws98</id><link href="https://old.reddit.com/r/Python/comments/ugws98/easist_and_most_stable_way_to_run_selenium_driver/" /><updated>2022-05-02T18:53:08+00:00</updated><published>2022-05-02T18:53:08+00:00</published><title>Easist and most stable way to run selenium driver for production applications.</title></entry><entry><author><name>/u/kaxil_naik</name><uri>https://old.reddit.com/user/kaxil_naik</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ug0k8p/apache_airflow_230_is_out/&quot;&gt; &lt;img src=&quot;https://external-preview.redd.it/EsuqxhOf53e5UizbLBRL8bFc-Q493fvY4Dnfm1kisqY.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=e17759d457f8e0b89d653959c8b580dd920bdb50&quot; alt=&quot;Apache Airflow 2.3.0 is out !&quot; title=&quot;Apache Airflow 2.3.0 is out !&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/ybjjn3m3fvw81.png?width=914&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=b6c804e17bd51694c8e05ae037786a69125d20ec&quot;&gt;https://preview.redd.it/ybjjn3m3fvw81.png?width=914&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=b6c804e17bd51694c8e05ae037786a69125d20ec&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Apache Airflow 2.3.0 is out! Soo many things to talk about 👇👇👇&lt;/p&gt; &lt;p&gt;➡️ This is the biggest &lt;strong&gt;Apache Airflow&lt;/strong&gt; release since 2.0.0&lt;/p&gt; &lt;p&gt;➡️ 700+ commits since 2.2 including 50 new features, 99 improvements, 85 bug fixes&lt;/p&gt; &lt;p&gt;The following are the biggest &amp;amp; noteworthy changes👇👇👇:&lt;/p&gt; &lt;p&gt;👉 Dynamic Task Mapping: &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0/concepts/dynamic-task-mapping.html&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0/concepts/dynamic-task-mapping.html&lt;/a&gt;&lt;/p&gt; &lt;p&gt;👉 Grid View replaces Tree View&lt;/p&gt; &lt;p&gt;👉 The new `airflow db clean` CLI command for purging old records&lt;/p&gt; &lt;p&gt;👉 First class support for DB downgrade - `airflow db downgrade` command - &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0/usage-cli.html#downgrading-airflow&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0/usage-cli.html#downgrading-airflow&lt;/a&gt;&lt;/p&gt; &lt;p&gt;👉 New Executor: LocalKubernetesExecutor&lt;/p&gt; &lt;p&gt;👉 Create Connection in native JSON format - no need to figure out the URI format&lt;/p&gt; &lt;p&gt;👉 And a new &amp;quot;SmoothOperator&amp;quot; -- This is a surprise ! And a very powerful feature, try it out and let me know what you think about it 😃&lt;/p&gt; &lt;p&gt;📦 PyPI: &lt;a href=&quot;https://pypi.org/project/apache-airflow/2.3.0/&quot;&gt;https://pypi.org/project/apache-airflow/2.3.0/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;📚 Docs: &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0&lt;/a&gt;&lt;/p&gt; &lt;p&gt;🛠️ Changelog: &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0/release_notes.html&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0/release_notes.html&lt;/a&gt;&lt;/p&gt; &lt;p&gt;🚢 Docker Image: &amp;quot;docker pull apache/airflow:2.3.0&amp;quot;&lt;/p&gt; &lt;p&gt;🚏 Constraints: &lt;a href=&quot;https://github.com/apache/airflow/tree/constraints-2.3.0&quot;&gt;https://github.com/apache/airflow/tree/constraints-2.3.0&lt;/a&gt;&lt;/p&gt; &lt;p&gt;------&lt;/p&gt; &lt;p&gt;Details around the features&lt;/p&gt; &lt;p&gt;&lt;strong&gt;👉 Dynamic Task Mapping: No longer hacking around dynamic tasks !!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Allows a way for a workflow to create a number of tasks at runtime based upon current data, rather than the DAG author having to know in advance how many tasks would be needed.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0/concepts/dynamic-task-mapping.html&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0/concepts/dynamic-task-mapping.html&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/9eseenx5fvw81.png?width=914&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=350ef6e80b0cb2c386bbad0c520c0bdf5b22f279&quot;&gt;https://preview.redd.it/9eseenx5fvw81.png?width=914&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=350ef6e80b0cb2c386bbad0c520c0bdf5b22f279&lt;/a&gt;&lt;/p&gt; &lt;p&gt;👉 &lt;strong&gt;Grid View replaces Tree View!!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Show runs and tasks but leave dependency lines to the graph view and handles Task Groups better!&lt;/p&gt; &lt;p&gt;Paves way for DAG Versioning - to easily show versions, which was impossible to handle in Tree View ! yay!&lt;/p&gt; &lt;p&gt;PR: &lt;a href=&quot;https://github.com/apache/airflow/pull/18675&quot;&gt;https://github.com/apache/airflow/pull/18675&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/kz1ehla7fvw81.png?width=2384&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=c6aea31d23d255c7f1e28938baa93c96d29f5618&quot;&gt;https://preview.redd.it/kz1ehla7fvw81.png?width=2384&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=c6aea31d23d255c7f1e28938baa93c96d29f5618&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/ds01ct48fvw81.png?width=1576&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=90dd1cd5b5aae47b4799e593d0714a8875fdff34&quot;&gt;https://preview.redd.it/ds01ct48fvw81.png?width=1576&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=90dd1cd5b5aae47b4799e593d0714a8875fdff34&lt;/a&gt;&lt;/p&gt; &lt;p&gt;👉 &lt;strong&gt;Create Connection in native JSON format - no need to figure out the URI format&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/5vu6g9o9fvw81.png?width=956&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=458d113ca900cfd806be350d7c8263ecf36c412b&quot;&gt;https://preview.redd.it/5vu6g9o9fvw81.png?width=956&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=458d113ca900cfd806be350d7c8263ecf36c412b&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;👉 First class support for DB downgrade - `airflow db downgrade` command -&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can downgrade to a particular Airflow version or a to a specific Alembic revision id.&lt;/p&gt; &lt;p&gt;Includes a &amp;quot;--show-sql-only&amp;quot; to output all the SQL so that you can run it yourself!&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0/usage-cli.html#downgrading-airflow&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0/usage-cli.html#downgrading-airflow&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/v7umdkbbfvw81.png?width=2048&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=f0d949463b0c0b2b944dd946c6d8a6e5219efd71&quot;&gt;https://preview.redd.it/v7umdkbbfvw81.png?width=2048&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=f0d949463b0c0b2b944dd946c6d8a6e5219efd71&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;👉 The new `airflow db clean` CLI command for purging old records.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This will help reduce time when running DB Migrations (when updating Airflow version)&lt;/p&gt; &lt;p&gt;No need to use Maintenance DAGs anymore!&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://preview.redd.it/ynkdg2wcfvw81.png?width=2048&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=4bbfbf42fb22dc881f9009be5a4b20f65a002184&quot;&gt;https://preview.redd.it/ynkdg2wcfvw81.png?width=2048&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=4bbfbf42fb22dc881f9009be5a4b20f65a002184&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;👉 New Executor: LocalKubernetesExecutor&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;It provides the capability of running tasks with either LocalExecutor, which runs tasks within the scheduler service, or with KubernetesExecutor, which runs each task&lt;/p&gt; &lt;p&gt;in its own pod on a kubernetes cluster based on the task&amp;#39;s queue&lt;/p&gt; &lt;p&gt;&lt;strong&gt;👉 DagProcessorManager can be run as standalone process now.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;As it runs user code, separating it from the scheduler process and running it as an independent process in a different host is a good idea.&lt;/p&gt; &lt;p&gt;Run it with &amp;quot;airflow dag-processor&amp;quot; CLI coomand&lt;/p&gt; &lt;p&gt;📚 &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0/configurations-ref.html#standalone_dag_processor&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0/configurations-ref.html#standalone_dag_processor&lt;/a&gt;&lt;/p&gt; &lt;p&gt;👉 A single page to check release notes instead of UPDATING.md on GitHub &amp;amp; Changelog on Airflow website: &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/2.3.0/release_notes.html&quot;&gt;https://airflow.apache.org/docs/apache-airflow/2.3.0/release_notes.html&lt;/a&gt;&lt;/p&gt; &lt;p&gt;👉 And a new &amp;quot;&lt;strong&gt;SmoothOperator&lt;/strong&gt;&amp;quot; - &amp;quot;from airflow.operators.smooth import SmoothOperator&amp;quot;&lt;/p&gt; &lt;p&gt;This is a surprise! And a very powerful feature, try it out and let me know what you think about it 😃&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/kaxil_naik&quot;&gt; /u/kaxil_naik &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ug0k8p/apache_airflow_230_is_out/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ug0k8p/apache_airflow_230_is_out/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ug0k8p</id><media:thumbnail url="https://external-preview.redd.it/EsuqxhOf53e5UizbLBRL8bFc-Q493fvY4Dnfm1kisqY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e17759d457f8e0b89d653959c8b580dd920bdb50" /><link href="https://old.reddit.com/r/Python/comments/ug0k8p/apache_airflow_230_is_out/" /><updated>2022-05-01T14:03:13+00:00</updated><published>2022-05-01T14:03:13+00:00</published><title>Apache Airflow 2.3.0 is out !</title></entry><entry><author><name>/u/opensourcecolumbus</name><uri>https://old.reddit.com/user/opensourcecolumbus</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugh63q/deeplearning_powered_image_search_in_just_one/&quot;&gt; &lt;img src=&quot;https://b.thumbs.redditmedia.com/9qeE-IlqDUJmTgK82IZ59QiwEcQdAqvZMMyG4xJt9gY.jpg&quot; alt=&quot;Deep-learning powered image search in just one line code&quot; title=&quot;Deep-learning powered image search in just one line code&quot; /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Here&amp;#39;s how&lt;/p&gt; &lt;pre&gt;&lt;code&gt;pip install jina-now jina now start --quality medium --data /local/img/folder &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And with just that, you&amp;#39;ll have a search backend/APIs and streamlit powered frontend ready to search your images with natural text. &lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://i.redd.it/kg70gb4dkzw81.gif&quot;&gt;https://i.redd.it/kg70gb4dkzw81.gif&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://examples.jina.ai/now/&quot;&gt;Demo&lt;/a&gt;(for art dataset)&lt;/p&gt; &lt;p&gt;How it works under the hood&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Structures data for processing using ``DocArray&lt;/li&gt; &lt;li&gt;Creates embeddings (vector space representation of data) using CLIP model(by OpenAI)&lt;/li&gt; &lt;li&gt;Exposes APIs and frontend to take the input query(as text or image)&lt;/li&gt; &lt;li&gt;The query is turned into embeddings on search and find nearest vectors (matching images with that text/image)&lt;/li&gt; &lt;li&gt;Returns the results in the requested format(json or html)&lt;/li&gt; &lt;/ol&gt; &lt;h1&gt;&lt;a href=&quot;https://github.com/jina-ai/now/&quot;&gt;Github Repo&lt;/a&gt;&lt;/h1&gt; &lt;p&gt;Try it out and ask me anything and feel free to share your feedback that can help me make it more useful&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/opensourcecolumbus&quot;&gt; /u/opensourcecolumbus &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugh63q/deeplearning_powered_image_search_in_just_one/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugh63q/deeplearning_powered_image_search_in_just_one/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><id>t3_ugh63q</id><media:thumbnail url="https://b.thumbs.redditmedia.com/9qeE-IlqDUJmTgK82IZ59QiwEcQdAqvZMMyG4xJt9gY.jpg" /><link href="https://old.reddit.com/r/Python/comments/ugh63q/deeplearning_powered_image_search_in_just_one/" /><updated>2022-05-02T04:06:54+00:00</updated><published>2022-05-02T04:06:54+00:00</published><title>Deep-learning powered image search in just one line code</title></entry><entry><author><name>/u/zdmit</name><uri>https://old.reddit.com/user/zdmit</uri></author><category term="Python" label="r/Python"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Well, no one asked about it but here it is, just in case someone was looking for it. &lt;/p&gt; &lt;p&gt;Code and &lt;a href=&quot;https://replit.com/@DimitryZub1/Scrape-Google-Scholar-Papers-from-a-certain-website#serpapi_solution.py&quot;&gt;example in the online IDE&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;```python from parsel import Selector import requests, json, os&lt;/p&gt; &lt;p&gt;def check_websites(website: list or str): if isinstance(website, str): return website # cabdirect.org elif isinstance(website, list): return &amp;quot; OR &amp;quot;.join([f&amp;#39;site:{site}&amp;#39; for site in website]) # site:cabdirect.org OR site:cab.net&lt;/p&gt; &lt;p&gt;def scrape_website_publications(query: str, website: list or str):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot; Add a search query and site or multiple websites. Following will work: [&amp;quot;cabdirect.org&amp;quot;, &amp;quot;lololo.com&amp;quot;, &amp;quot;brabus.org&amp;quot;] -&amp;gt; list[str] [&amp;quot;cabdirect.org&amp;quot;] -&amp;gt; list[str] &amp;quot;cabdirect.org&amp;quot; -&amp;gt; str &amp;quot;&amp;quot;&amp;quot; # https://docs.python-requests.org/en/master/user/quickstart/#passing-parameters-in-urls params = { &amp;quot;q&amp;quot;: f&amp;#39;{query.lower()} {check_websites(website=website)}&amp;#39;, # search query &amp;quot;hl&amp;quot;: &amp;quot;en&amp;quot;, # language of the search &amp;quot;gl&amp;quot;: &amp;quot;us&amp;quot; # country of the search } # https://docs.python-requests.org/en/master/user/quickstart/#custom-headers headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36&amp;quot; } html = requests.get(&amp;quot;https://scholar.google.com/scholar&amp;quot;, params=params, headers=headers, timeout=30) selector = Selector(html.text) publications = [] # iterate over every element from organic results from the first page and extract the data for result in selector.css(&amp;quot;.gs_r.gs_scl&amp;quot;): title = result.css(&amp;quot;.gs_rt&amp;quot;).xpath(&amp;quot;normalize-space()&amp;quot;).get() link = result.css(&amp;quot;.gs_rt a::attr(href)&amp;quot;).get() result_id = result.attrib[&amp;quot;data-cid&amp;quot;] snippet = result.css(&amp;quot;.gs_rs::text&amp;quot;).get() publication_info = result.css(&amp;quot;.gs_a&amp;quot;).xpath(&amp;quot;normalize-space()&amp;quot;).get() cite_by_link = f&amp;#39;https://scholar.google.com/scholar{result.css(&amp;quot;.gs_or_btn.gs_nph+ a::attr(href)&amp;quot;).get()}&amp;#39; all_versions_link = f&amp;#39;https://scholar.google.com/scholar{result.css(&amp;quot;a~ a+ .gs_nph::attr(href)&amp;quot;).get()}&amp;#39; related_articles_link = f&amp;#39;https://scholar.google.com/scholar{result.css(&amp;quot;a:nth-child(4)::attr(href)&amp;quot;).get()}&amp;#39; publications.append({ &amp;quot;result_id&amp;quot;: result_id, &amp;quot;title&amp;quot;: title, &amp;quot;link&amp;quot;: link, &amp;quot;snippet&amp;quot;: snippet, &amp;quot;publication_info&amp;quot;: publication_info, &amp;quot;cite_by_link&amp;quot;: cite_by_link, &amp;quot;all_versions_link&amp;quot;: all_versions_link, &amp;quot;related_articles_link&amp;quot;: related_articles_link, }) # print or return the results # return publications print(json.dumps(publications, indent=2, ensure_ascii=False)) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;scrape_website_publications(query=&amp;quot;biology&amp;quot;, website=&amp;quot;cabdirect.org&amp;quot;) ```&lt;/p&gt; &lt;p&gt;Outputs: &lt;code&gt;json [ { &amp;quot;result_id&amp;quot;: &amp;quot;6zRLFbcxtREJ&amp;quot;, &amp;quot;title&amp;quot;: &amp;quot;The biology of mycorrhiza.&amp;quot;, &amp;quot;link&amp;quot;: &amp;quot;https://www.cabdirect.org/cabdirect/abstract/19690600367&amp;quot;, &amp;quot;snippet&amp;quot;: &amp;quot;In the second, revised and extended, edition of this work [cf. FA 20 No. 4264], two new &amp;quot;, &amp;quot;publication_info&amp;quot;: &amp;quot;JL Harley - The biology of mycorrhiza., 1969 - cabdirect.org&amp;quot;, &amp;quot;cite_by_link&amp;quot;: &amp;quot;https://scholar.google.com/scholar/scholar?cites=1275980731835430123&amp;amp;as_sdt=2005&amp;amp;sciodt=0,5&amp;amp;hl=en&amp;quot;, &amp;quot;all_versions_link&amp;quot;: &amp;quot;https://scholar.google.com/scholar/scholar?cluster=1275980731835430123&amp;amp;hl=en&amp;amp;as_sdt=0,5&amp;quot;, &amp;quot;related_articles_link&amp;quot;: &amp;quot;https://scholar.google.com/scholar/scholar?q=related:6zRLFbcxtREJ:scholar.google.com/&amp;amp;scioq=biology+site:cabdirect.org&amp;amp;hl=en&amp;amp;as_sdt=0,5&amp;quot; }, ... other results ] &lt;/code&gt;&lt;/p&gt; &lt;p&gt;A more detailed explanation on the SerpApi blog: &lt;a href=&quot;https://serpapi.com/blog/scrape-google-scholar-publications-from-a-certain-website-using-python/#how-filtering-works&quot;&gt;https://serpapi.com/blog/scrape-google-scholar-publications-from-a-certain-website-using-python/#how-filtering-works&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://old.reddit.com/user/zdmit&quot;&gt; /u/zdmit &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugmavf/script_scraping_google_scholar_publications_from/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://old.reddit.com/r/Python/comments/ugmavf/script_scraping_google_scholar_publications_from/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_ugmavf</id><link href="https://old.reddit.com/r/Python/comments/ugmavf/script_scraping_google_scholar_publications_from/" /><updated>2022-05-02T10:08:17+00:00</updated><published>2022-05-02T10:08:17+00:00</published><title>[Script] Scraping Google Scholar publications from a certain website</title></entry></feed>
